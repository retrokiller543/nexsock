name: Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-22.04
            features: ""
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-22.04
            features: "jemalloc"
          
          # Linux aarch64
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-22.04
            features: ""
          
          # macOS x86_64
          - target: x86_64-apple-darwin
            runner: macos-13
            features: ""
          - target: x86_64-apple-darwin
            runner: macos-13
            features: "jemalloc"
          
          # macOS aarch64
          - target: aarch64-apple-darwin
            runner: macos-14
            features: ""
          - target: aarch64-apple-darwin
            runner: macos-14
            features: "jemalloc"
          
          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            runner: windows-latest
            features: ""
          - target: x86_64-pc-windows-msvc
            runner: windows-latest
            features: "jemalloc"

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install openssl pkgconf

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cross-compilation tools (Linux aarch64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

    - name: Run tests (no features)
      if: matrix.features == ''
      run: cargo test --target ${{ matrix.target }} --verbose

    - name: Run tests (with features)
      if: matrix.features != ''
      run: cargo test --target ${{ matrix.target }} --features ${{ matrix.features }} --verbose

    - name: Run nexsock-testing tests
      if: matrix.target == 'x86_64-unknown-linux-gnu' && matrix.features == ''
      run: cargo test -p nexsock-testing --verbose

    - name: Run nexsock-db tests
      if: matrix.target == 'x86_64-unknown-linux-gnu' && matrix.features == ''
      run: cargo test -p nexsock-db --verbose

    - name: Check compilation (no tests for cross-compilation)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: cargo check --target ${{ matrix.target }} --verbose

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check documentation
      run: cargo doc --no-deps --all-features --document-private-items
      env:
        RUSTDOCFLAGS: -D warnings

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit --ignore RUSTSEC-2023-0071 --ignore RUSTSEC-2024-0436

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate coverage report
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        fail_ci_if_error: true
