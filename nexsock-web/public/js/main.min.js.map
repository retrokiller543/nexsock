{
  "version": 3,
  "sources": ["../../src-ts/types.ts", "../../src-ts/main.ts"],
  "sourcesContent": ["/**\n * Type definitions for Nexsock Web Interface\n */\n\n// HTMX global object\ndeclare global {\n  interface Window {\n    htmx: {\n      ajax: (method: string, url: string, options?: {\n        target?: string;\n        swap?: string;\n        values?: Record<string, string>;\n      }) => void;\n    };\n    nexsock: NexsockAPI;\n  }\n}\n\n// Service-related types\nexport interface ServiceConfig {\n  envVars: Record<string, string>;\n  description: string;\n  lastUsed: string;\n  created: string;\n}\n\nexport interface ServiceConfigs {\n  [configName: string]: ServiceConfig;\n}\n\nexport interface ServiceInfo {\n  id: string;\n  name: string;\n  state: 'Running' | 'Stopped' | 'Starting' | 'Failed';\n  port?: number;\n  repoUrl?: string;\n  repoPath?: string;\n}\n\n// Git-related types\nexport interface GitBranch {\n  name: string;\n  current: boolean;\n  remote: boolean;\n}\n\nexport interface GitCommit {\n  hash: string;\n  message: string;\n  author: string;\n  date: string;\n}\n\nexport interface GitStatus {\n  branch: string;\n  commit: string;\n  remote?: string;\n  ahead?: number;\n  behind?: number;\n  dirty: boolean;\n}\n\n// UI-related types\nexport type MessageType = 'success' | 'error' | 'warning' | 'info';\n\nexport interface DropdownOptions {\n  closeOnClick?: boolean;\n  closeOnEscape?: boolean;\n  closeOnOutsideClick?: boolean;\n}\n\n// Configuration management types\nexport interface ConfigurationTemplate {\n  name: string;\n  description: string;\n  envVars: Record<string, string>;\n}\n\n// API interface\nexport interface NexsockAPI {\n  // Configuration management\n  saveServiceConfig: (serviceName: string, configName: string, envVars: Record<string, string>, description?: string) => void;\n  getServiceConfigs: (serviceName: string) => ServiceConfigs;\n  loadServiceConfig: (serviceName: string, configName: string) => ServiceConfig | null;\n  deleteServiceConfig: (serviceName: string, configName: string) => boolean;\n  \n  // Environment variable management\n  getCurrentEnvVars: (serviceName: string) => Record<string, string>;\n  applyEnvVarsToForm: (serviceName: string, envVars: Record<string, string>) => void;\n  clearCurrentEnvVars: (serviceName: string) => void;\n  \n  // UI helpers\n  loadConfigFromSelection: (serviceName: string, configName: string) => void;\n  showSaveConfigModal: (serviceName: string) => void;\n  refreshConfigUI: (serviceName: string) => void;\n  deleteConfigAndRefresh: (serviceName: string, configName: string) => void;\n  toggleManagement: (serviceName: string) => void;\n  closeModal: () => void;\n  showMessage: (message: string, type?: MessageType) => void;\n  confirmRemove: (serviceName: string) => Promise<void>;\n  \n  // Git operations\n  showGitTab: (tabName: 'commits' | 'branches', serviceName: string) => void;\n  createNewBranch: (serviceName: string) => void;\n  refreshGitSection: (serviceName: string) => void;\n  toggleGitContent: (contentId: string) => void;\n  restoreGitContentVisibility: () => void;\n  \n  // Dropdown management\n  toggleDropdown: (dropdownId: string) => void;\n  closeAllDropdowns: () => void;\n}\n\n// DOM Element interfaces for better type safety\nexport interface EnvVarPair extends HTMLElement {\n  querySelector<T extends keyof HTMLElementTagNameMap>(selector: T): HTMLElementTagNameMap[T] | null;\n  querySelectorAll<T extends keyof HTMLElementTagNameMap>(selector: T): NodeListOf<HTMLElementTagNameMap[T]>;\n}\n\nexport interface ServiceForm extends HTMLFormElement {\n  elements: HTMLFormControlsCollection & {\n    [key: string]: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n  };\n}\n\n// Event-related types\nexport interface HTMXEvent extends Event {\n  detail: {\n    xhr?: XMLHttpRequest;\n    target?: HTMLElement;\n    requestConfig?: {\n      elt: HTMLElement;\n      path: string;\n      verb: string;\n    };\n  };\n}\n\n// Storage keys for localStorage\nexport const STORAGE_KEYS = {\n  SERVICE_CONFIG: (serviceName: string) => `nexsock_service_config_${serviceName}`,\n  GIT_CONTENT_COLLAPSED: (contentId: string) => `git_${contentId}_collapsed`,\n} as const;", "/**\n * Main TypeScript file for Nexsock Web Interface\n * Uses HTMX-first approach with minimal vanilla TS for enhanced functionality\n */\n\nimport { \n  ServiceConfig, \n  ServiceConfigs, \n  MessageType, \n  NexsockAPI,\n  STORAGE_KEYS,\n  HTMXEvent \n} from './types.js';\n\n// ===============================================\n// Configuration Management with localStorage\n// ===============================================\n\n/**\n * Saves environment variable configuration for a service to localStorage\n */\nfunction saveServiceConfig(\n  serviceName: string, \n  configName: string, \n  envVars: Record<string, string>, \n  description: string = ''\n): void {\n  const key = STORAGE_KEYS.SERVICE_CONFIG(serviceName);\n  const configs = getServiceConfigs(serviceName);\n  \n  configs[configName] = {\n    envVars,\n    description,\n    lastUsed: new Date().toISOString(),\n    created: configs[configName]?.created || new Date().toISOString()\n  };\n  \n  localStorage.setItem(key, JSON.stringify(configs));\n  console.log(`Saved configuration '${configName}' for service '${serviceName}'`);\n}\n\n/**\n * Gets all saved configurations for a service\n */\nfunction getServiceConfigs(serviceName: string): ServiceConfigs {\n  const key = STORAGE_KEYS.SERVICE_CONFIG(serviceName);\n  const stored = localStorage.getItem(key);\n  return stored ? JSON.parse(stored) : {};\n}\n\n/**\n * Loads a specific configuration for a service\n */\nfunction loadServiceConfig(serviceName: string, configName: string): ServiceConfig | null {\n  const configs = getServiceConfigs(serviceName);\n  return configs[configName] || null;\n}\n\n/**\n * Deletes a configuration for a service\n */\nfunction deleteServiceConfig(serviceName: string, configName: string): boolean {\n  const key = STORAGE_KEYS.SERVICE_CONFIG(serviceName);\n  const configs = getServiceConfigs(serviceName);\n  \n  if (configs[configName]) {\n    delete configs[configName];\n    localStorage.setItem(key, JSON.stringify(configs));\n    console.log(`Deleted configuration '${configName}' for service '${serviceName}'`);\n    return true;\n  }\n  return false;\n}\n\n// ===============================================\n// Service Management Helpers\n// ===============================================\n\n/**\n * Gets the current environment variables from the form\n */\nfunction getCurrentEnvVars(serviceName: string): Record<string, string> {\n  const envVars: Record<string, string> = {};\n  const container = document.getElementById(`env-vars-${serviceName}`);\n  \n  if (container) {\n    container.querySelectorAll('.env-var-pair').forEach(pair => {\n      const inputs = pair.querySelectorAll<HTMLInputElement>('input');\n      const [keyInput, valueInput] = inputs;\n      if (keyInput?.value) {\n        envVars[keyInput.value] = valueInput?.value || '';\n      }\n    });\n  }\n  return envVars;\n}\n\n/**\n * Applies environment variables to the form using HTMX\n */\nfunction applyEnvVarsToForm(serviceName: string, envVars: Record<string, string>): void {\n  const container = document.getElementById(`env-vars-${serviceName}`);\n  if (!container) return;\n  \n  // Clear existing variables\n  container.innerHTML = '';\n  \n  // Load environment variables using HTMX\n  Object.entries(envVars).forEach(([key, value]) => {\n    window.htmx.ajax('GET', `/api/templates/env-var-pair?key=${encodeURIComponent(key)}&value=${encodeURIComponent(value)}`, {\n      target: `#env-vars-${serviceName}`,\n      swap: 'beforeend'\n    });\n  });\n  \n  // Add one empty pair for additional variables\n  window.htmx.ajax('GET', '/api/templates/env-var-pair', {\n    target: `#env-vars-${serviceName}`,\n    swap: 'beforeend'\n  });\n}\n\n/**\n * Clears all current environment variables\n */\nfunction clearCurrentEnvVars(serviceName: string): void {\n  const container = document.getElementById(`env-vars-${serviceName}`);\n  if (!container) return;\n  \n  if (confirm('Clear all current environment variables?')) {\n    container.innerHTML = '';\n    // Add one empty pair\n    window.htmx.ajax('GET', '/api/templates/env-var-pair', {\n      target: `#env-vars-${serviceName}`,\n      swap: 'beforeend'\n    });\n    showMessage('Environment variables cleared', 'info');\n  }\n}\n\n/**\n * Loads a configuration from selection\n */\nfunction loadConfigFromSelection(serviceName: string, configName: string): void {\n  if (!configName) return;\n  \n  const config = loadServiceConfig(serviceName, configName);\n  if (config) {\n    applyEnvVarsToForm(serviceName, config.envVars);\n    console.log(`Loaded configuration '${configName}' for service '${serviceName}'`);\n  }\n}\n\n/**\n * Shows a modal to save current environment variables as a configuration\n */\nfunction showSaveConfigModal(serviceName: string): void {\n  const envVars = getCurrentEnvVars(serviceName);\n  \n  if (Object.keys(envVars).length === 0) {\n    showMessage('Please add some environment variables before saving a configuration.', 'warning');\n    return;\n  }\n  \n  const configName = prompt('Enter a name for this configuration:');\n  if (!configName) return;\n  \n  const description = prompt('Enter a description (optional):') || '';\n  \n  saveServiceConfig(serviceName, configName, envVars, description);\n  refreshConfigUI(serviceName);\n  showMessage(`Configuration '${configName}' saved successfully!`, 'success');\n}\n\n/**\n * Refreshes the configuration UI components using HTMX\n */\nfunction refreshConfigUI(serviceName: string): void {\n  window.htmx.ajax('GET', `/api/templates/config-section?service=${encodeURIComponent(serviceName)}`, {\n    target: `#config-section-${serviceName}`,\n    swap: 'innerHTML'\n  });\n}\n\n/**\n * Deletes a configuration and refreshes the modal\n */\nfunction deleteConfigAndRefresh(serviceName: string, configName: string): void {\n  if (confirm(`Are you sure you want to delete the configuration '${configName}'?`)) {\n    deleteServiceConfig(serviceName, configName);\n    // Refresh the modal content\n    window.htmx.ajax('GET', `/api/templates/config-modal-content?service=${encodeURIComponent(serviceName)}`, {\n      target: '.modal-body',\n      swap: 'innerHTML'\n    });\n    // Also refresh the main config UI\n    refreshConfigUI(serviceName);\n    showMessage(`Configuration '${configName}' deleted successfully.`, 'success');\n  }\n}\n\n// ===============================================\n// UI Helpers\n// ===============================================\n\n/**\n * Toggles the visibility of service management sections\n */\nfunction toggleManagement(serviceName: string): void {\n  const managementDiv = document.getElementById(`management-${serviceName}`);\n  if (managementDiv) {\n    const isHidden = managementDiv.style.display === 'none';\n    managementDiv.style.display = isHidden ? 'block' : 'none';\n  }\n}\n\n/**\n * Closes any open modal\n */\nfunction closeModal(): void {\n  const modal = document.querySelector<HTMLElement>('.modal-overlay');\n  if (modal) {\n    modal.remove();\n  }\n}\n\n/**\n * Shows a temporary message to the user\n */\nfunction showMessage(message: string, type: MessageType = 'info'): void {\n  // Create message element\n  const messageEl = document.createElement('div');\n  messageEl.className = `message message-${type}`;\n  messageEl.textContent = message;\n  \n  // Add to messages container or create one\n  let container = document.getElementById('messages-container');\n  if (!container) {\n    container = document.createElement('div');\n    container.id = 'messages-container';\n    container.className = 'messages';\n    document.body.appendChild(container);\n  }\n  \n  container.appendChild(messageEl);\n  \n  // Auto-remove after 5 seconds\n  setTimeout(() => {\n    if (messageEl.parentNode) {\n      messageEl.parentNode.removeChild(messageEl);\n    }\n  }, 5000);\n}\n\n/**\n * Confirms service removal with better UX\n */\nasync function confirmRemove(serviceName: string): Promise<void> {\n  if (!serviceName) {\n    showMessage('Invalid service name', 'error');\n    return;\n  }\n\n  if (confirm(`Are you sure you want to remove ${serviceName}? This action cannot be undone.`)) {\n    try {\n      const response = await fetch(`/api/services/${serviceName}`, {\n        method: 'DELETE'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error: ${response.status}`);\n      }\n      \n      showMessage(`Service '${serviceName}' removed successfully.`, 'success');\n      \n      // Navigate back to services list\n      window.location.href = '/';\n    } catch (error) {\n      console.error('Error removing service:', error);\n      showMessage('Failed to remove service', 'error');\n    }\n  }\n}\n\n// ===============================================\n// Git Operations\n// ===============================================\n\n/**\n * Shows a specific git tab (commits or branches)\n */\nfunction showGitTab(tabName: 'commits' | 'branches', serviceName: string): void {\n  // Update tab button states\n  document.querySelectorAll('.tab-button').forEach(btn => {\n    btn.classList.remove('active');\n  });\n  \n  // Find and activate the clicked tab button\n  const clickedTab = (event as any)?.target as HTMLElement;\n  if (clickedTab) {\n    clickedTab.classList.add('active');\n  }\n  \n  // Load the appropriate content\n  const tabContent = document.getElementById('git-tab-content');\n  if (!tabContent) return;\n  \n  if (tabName === 'commits') {\n    tabContent.innerHTML = '<div class=\"loading\">Loading commits...</div>';\n    window.htmx.ajax('GET', `/api/templates/git-log?service=${serviceName}`, {\n      target: '#git-tab-content',\n      swap: 'innerHTML'\n    });\n  } else if (tabName === 'branches') {\n    tabContent.innerHTML = '<div class=\"loading\">Loading branches...</div>';\n    window.htmx.ajax('GET', `/api/templates/git-branches?service=${serviceName}`, {\n      target: '#git-tab-content',\n      swap: 'innerHTML'\n    });\n  }\n}\n\n/**\n * Creates a new git branch\n */\nfunction createNewBranch(serviceName: string): void {\n  const input = document.getElementById('new-branch-name') as HTMLInputElement;\n  if (!input) return;\n  \n  const branchName = input.value.trim();\n  if (!branchName) {\n    showMessage('Please enter a branch name', 'warning');\n    return;\n  }\n  \n  if (!confirm(`Create new branch \"${branchName}\" and switch to it?`)) {\n    return;\n  }\n  \n  // Use fetch to create the branch\n  const formData = new FormData();\n  formData.append('branch', branchName);\n  formData.append('create', 'true');\n  \n  fetch(`/api/services/${serviceName}/git/checkout/branch`, {\n    method: 'POST',\n    body: formData\n  })\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error: ${response.status}`);\n    }\n    return response.json();\n  })\n  .then(data => {\n    // Clear the input\n    input.value = '';\n    \n    // Refresh the git section\n    window.htmx.ajax('GET', `/api/templates/git-section?service=${serviceName}`, {\n      target: '#git-section',\n      swap: 'outerHTML'\n    });\n    \n    showMessage(`Successfully created and switched to branch \"${branchName}\"`, 'success');\n  })\n  .catch(error => {\n    console.error('Error creating branch:', error);\n    showMessage('Failed to create branch', 'error');\n  });\n}\n\n/**\n * Refreshes the git section for a service\n */\nfunction refreshGitSection(serviceName: string): void {\n  window.htmx.ajax('GET', `/api/templates/git-section?service=${serviceName}`, {\n    target: '#git-section',\n    swap: 'outerHTML'\n  });\n}\n\n/**\n * Toggles git content visibility (commits or branches)\n */\nfunction toggleGitContent(contentId: string): void {\n  const content = document.getElementById(contentId);\n  if (!content) return;\n  \n  content.classList.toggle('collapsed');\n  \n  // Update local storage to remember user preference\n  const isCollapsed = content.classList.contains('collapsed');\n  localStorage.setItem(STORAGE_KEYS.GIT_CONTENT_COLLAPSED(contentId), isCollapsed.toString());\n}\n\n/**\n * Restores git content visibility from user preferences\n */\nfunction restoreGitContentVisibility(): void {\n  // Restore commits visibility\n  const commitsCollapsed = localStorage.getItem(STORAGE_KEYS.GIT_CONTENT_COLLAPSED('git-commits-list')) === 'true';\n  const commitsList = document.getElementById('git-commits-list');\n  if (commitsList && commitsCollapsed) {\n    commitsList.classList.add('collapsed');\n  }\n  \n  // Restore branches visibility\n  const branchesCollapsed = localStorage.getItem(STORAGE_KEYS.GIT_CONTENT_COLLAPSED('git-branches-list')) === 'true';\n  const branchesList = document.getElementById('git-branches-list');\n  if (branchesList && branchesCollapsed) {\n    branchesList.classList.add('collapsed');\n  }\n}\n\n// ===============================================\n// Dropdown Management\n// ===============================================\n\n/**\n * Toggles dropdown menu visibility\n */\nfunction toggleDropdown(dropdownId: string): void {\n  const dropdown = document.getElementById(dropdownId);\n  if (!dropdown) return;\n  \n  // Close all other dropdowns first\n  document.querySelectorAll('.dropdown.active').forEach(dd => {\n    if (dd.id !== dropdownId) {\n      dd.classList.remove('active');\n    }\n  });\n  \n  // Toggle this dropdown\n  dropdown.classList.toggle('active');\n}\n\n/**\n * Closes all open dropdowns\n */\nfunction closeAllDropdowns(): void {\n  document.querySelectorAll('.dropdown.active').forEach(dropdown => {\n    dropdown.classList.remove('active');\n  });\n}\n\n// ===============================================\n// Initialization and Event Handling\n// ===============================================\n\n// Initialize when page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Initialize config UI for all services\n  document.querySelectorAll<HTMLElement>('[data-service-name]').forEach(element => {\n    const serviceName = element.getAttribute('data-service-name');\n    if (serviceName) {\n      refreshConfigUI(serviceName);\n    }\n  });\n  \n  // Restore git content visibility preferences\n  restoreGitContentVisibility();\n  \n  // Add global error handler for HTMX\n  document.body.addEventListener('htmx:responseError', (event: Event) => {\n    const htmxEvent = event as HTMXEvent;\n    console.error('HTMX Error:', htmxEvent.detail);\n    showMessage('An error occurred while loading content', 'error');\n  });\n  \n  // Add loading indicator for HTMX requests\n  document.body.addEventListener('htmx:beforeRequest', (event: Event) => {\n    const target = event.target as HTMLElement;\n    if (target.classList.contains('button')) {\n      target.classList.add('button-loading');\n    }\n  });\n  \n  document.body.addEventListener('htmx:afterRequest', (event: Event) => {\n    const target = event.target as HTMLElement;\n    if (target.classList.contains('button')) {\n      target.classList.remove('button-loading');\n    }\n    \n    // Restore git content visibility after HTMX updates\n    restoreGitContentVisibility();\n  });\n});\n\n// Handle click outside modal to close\ndocument.addEventListener('click', (event: Event) => {\n  const target = event.target as HTMLElement;\n  if (target.classList.contains('modal-overlay')) {\n    closeModal();\n  }\n  \n  // Close dropdowns when clicking outside\n  if (!target.closest('.dropdown')) {\n    closeAllDropdowns();\n  }\n});\n\n// Handle ESC key to close modal and dropdowns\ndocument.addEventListener('keydown', (event: KeyboardEvent) => {\n  if (event.key === 'Escape') {\n    closeModal();\n    closeAllDropdowns();\n  }\n});\n\n// Export functions for global access\nconst nexsockAPI: NexsockAPI = {\n  saveServiceConfig,\n  getServiceConfigs,\n  loadServiceConfig,\n  deleteServiceConfig,\n  getCurrentEnvVars,\n  applyEnvVarsToForm,\n  loadConfigFromSelection,\n  showSaveConfigModal,\n  refreshConfigUI,\n  deleteConfigAndRefresh,\n  toggleManagement,\n  closeModal,\n  showMessage,\n  confirmRemove,\n  showGitTab,\n  createNewBranch,\n  refreshGitSection,\n  toggleDropdown,\n  closeAllDropdowns,\n  clearCurrentEnvVars,\n  toggleGitContent,\n  restoreGitContentVisibility\n};\n\n// Make API available globally\nwindow.nexsock = nexsockAPI;"],
  "mappings": "mBA2IO,IAAMA,EAAe,CAC1B,eAAiBC,GAAwB,0BAA0BA,CAAW,GAC9E,sBAAwBC,GAAsB,OAAOA,CAAS,cCxHhE,SAASC,EACPC,EACAC,EACAC,EACAC,EAAsB,GAAE,CAExB,IAAMC,EAAMC,EAAa,eAAeL,CAAW,EAC7CM,EAAUC,EAAkBP,CAAW,EAE7CM,EAAQL,CAAU,EAAI,CACpB,QAAAC,EACA,YAAAC,EACA,SAAU,IAAI,KAAI,EAAG,YAAW,EAChC,QAASG,EAAQL,CAAU,GAAG,SAAW,IAAI,KAAI,EAAG,YAAW,GAGjE,aAAa,QAAQG,EAAK,KAAK,UAAUE,CAAO,CAAC,EACjD,QAAQ,IAAI,wBAAwBL,CAAU,kBAAkBD,CAAW,GAAG,CAChF,CAKA,SAASO,EAAkBP,EAAmB,CAC5C,IAAMI,EAAMC,EAAa,eAAeL,CAAW,EAC7CQ,EAAS,aAAa,QAAQJ,CAAG,EACvC,OAAOI,EAAS,KAAK,MAAMA,CAAM,EAAI,CAAA,CACvC,CAKA,SAASC,EAAkBT,EAAqBC,EAAkB,CAEhE,OADgBM,EAAkBP,CAAW,EAC9BC,CAAU,GAAK,IAChC,CAKA,SAASS,EAAoBV,EAAqBC,EAAkB,CAClE,IAAMG,EAAMC,EAAa,eAAeL,CAAW,EAC7CM,EAAUC,EAAkBP,CAAW,EAE7C,OAAIM,EAAQL,CAAU,GACpB,OAAOK,EAAQL,CAAU,EACzB,aAAa,QAAQG,EAAK,KAAK,UAAUE,CAAO,CAAC,EACjD,QAAQ,IAAI,0BAA0BL,CAAU,kBAAkBD,CAAW,GAAG,EACzE,IAEF,EACT,CASA,SAASW,EAAkBX,EAAmB,CAC5C,IAAME,EAAkC,CAAA,EAClCU,EAAY,SAAS,eAAe,YAAYZ,CAAW,EAAE,EAEnE,OAAIY,GACFA,EAAU,iBAAiB,eAAe,EAAE,QAAQC,GAAO,CACzD,IAAMC,EAASD,EAAK,iBAAmC,OAAO,EACxD,CAACE,EAAUC,CAAU,EAAIF,EAC3BC,GAAU,QACZb,EAAQa,EAAS,KAAK,EAAIC,GAAY,OAAS,GAEnD,CAAC,EAEId,CACT,CAKA,SAASe,EAAmBjB,EAAqBE,EAA+B,CAC9E,IAAMU,EAAY,SAAS,eAAe,YAAYZ,CAAW,EAAE,EAC9DY,IAGLA,EAAU,UAAY,GAGtB,OAAO,QAAQV,CAAO,EAAE,QAAQ,CAAC,CAACE,EAAKc,CAAK,IAAK,CAC/C,OAAO,KAAK,KAAK,MAAO,mCAAmC,mBAAmBd,CAAG,CAAC,UAAU,mBAAmBc,CAAK,CAAC,GAAI,CACvH,OAAQ,aAAalB,CAAW,GAChC,KAAM,YACP,CACH,CAAC,EAGD,OAAO,KAAK,KAAK,MAAO,8BAA+B,CACrD,OAAQ,aAAaA,CAAW,GAChC,KAAM,YACP,EACH,CAKA,SAASmB,EAAoBnB,EAAmB,CAC9C,IAAMY,EAAY,SAAS,eAAe,YAAYZ,CAAW,EAAE,EAC9DY,GAED,QAAQ,0CAA0C,IACpDA,EAAU,UAAY,GAEtB,OAAO,KAAK,KAAK,MAAO,8BAA+B,CACrD,OAAQ,aAAaZ,CAAW,GAChC,KAAM,YACP,EACDoB,EAAY,gCAAiC,MAAM,EAEvD,CAKA,SAASC,EAAwBrB,EAAqBC,EAAkB,CACtE,GAAI,CAACA,EAAY,OAEjB,IAAMqB,EAASb,EAAkBT,EAAaC,CAAU,EACpDqB,IACFL,EAAmBjB,EAAasB,EAAO,OAAO,EAC9C,QAAQ,IAAI,yBAAyBrB,CAAU,kBAAkBD,CAAW,GAAG,EAEnF,CAKA,SAASuB,EAAoBvB,EAAmB,CAC9C,IAAME,EAAUS,EAAkBX,CAAW,EAE7C,GAAI,OAAO,KAAKE,CAAO,EAAE,SAAW,EAAG,CACrCkB,EAAY,uEAAwE,SAAS,EAC7F,MACF,CAEA,IAAMnB,EAAa,OAAO,sCAAsC,EAChE,GAAI,CAACA,EAAY,OAEjB,IAAME,EAAc,OAAO,iCAAiC,GAAK,GAEjEJ,EAAkBC,EAAaC,EAAYC,EAASC,CAAW,EAC/DqB,EAAgBxB,CAAW,EAC3BoB,EAAY,kBAAkBnB,CAAU,wBAAyB,SAAS,CAC5E,CAKA,SAASuB,EAAgBxB,EAAmB,CAC1C,OAAO,KAAK,KAAK,MAAO,yCAAyC,mBAAmBA,CAAW,CAAC,GAAI,CAClG,OAAQ,mBAAmBA,CAAW,GACtC,KAAM,YACP,CACH,CAKA,SAASyB,EAAuBzB,EAAqBC,EAAkB,CACjE,QAAQ,sDAAsDA,CAAU,IAAI,IAC9ES,EAAoBV,EAAaC,CAAU,EAE3C,OAAO,KAAK,KAAK,MAAO,+CAA+C,mBAAmBD,CAAW,CAAC,GAAI,CACxG,OAAQ,cACR,KAAM,YACP,EAEDwB,EAAgBxB,CAAW,EAC3BoB,EAAY,kBAAkBnB,CAAU,0BAA2B,SAAS,EAEhF,CASA,SAASyB,EAAiB1B,EAAmB,CAC3C,IAAM2B,EAAgB,SAAS,eAAe,cAAc3B,CAAW,EAAE,EACzE,GAAI2B,EAAe,CACjB,IAAMC,EAAWD,EAAc,MAAM,UAAY,OACjDA,EAAc,MAAM,QAAUC,EAAW,QAAU,MACrD,CACF,CAKA,SAASC,GAAU,CACjB,IAAMC,EAAQ,SAAS,cAA2B,gBAAgB,EAC9DA,GACFA,EAAM,OAAM,CAEhB,CAKA,SAASV,EAAYW,EAAiBC,EAAoB,OAAM,CAE9D,IAAMC,EAAY,SAAS,cAAc,KAAK,EAC9CA,EAAU,UAAY,mBAAmBD,CAAI,GAC7CC,EAAU,YAAcF,EAGxB,IAAInB,EAAY,SAAS,eAAe,oBAAoB,EACvDA,IACHA,EAAY,SAAS,cAAc,KAAK,EACxCA,EAAU,GAAK,qBACfA,EAAU,UAAY,WACtB,SAAS,KAAK,YAAYA,CAAS,GAGrCA,EAAU,YAAYqB,CAAS,EAG/B,WAAW,IAAK,CACVA,EAAU,YACZA,EAAU,WAAW,YAAYA,CAAS,CAE9C,EAAG,GAAI,CACT,CAKA,eAAeC,EAAclC,EAAmB,CAC9C,GAAI,CAACA,EAAa,CAChBoB,EAAY,uBAAwB,OAAO,EAC3C,MACF,CAEA,GAAI,QAAQ,mCAAmCpB,CAAW,iCAAiC,EACzF,GAAI,CACF,IAAMmC,EAAW,MAAM,MAAM,iBAAiBnC,CAAW,GAAI,CAC3D,OAAQ,SACT,EAED,GAAI,CAACmC,EAAS,GACZ,MAAM,IAAI,MAAM,eAAeA,EAAS,MAAM,EAAE,EAGlDf,EAAY,YAAYpB,CAAW,0BAA2B,SAAS,EAGvE,OAAO,SAAS,KAAO,GACzB,OAASoC,EAAO,CACd,QAAQ,MAAM,0BAA2BA,CAAK,EAC9ChB,EAAY,2BAA4B,OAAO,CACjD,CAEJ,CASA,SAASiB,EAAWC,EAAiCtC,EAAmB,CAEtE,SAAS,iBAAiB,aAAa,EAAE,QAAQuC,GAAM,CACrDA,EAAI,UAAU,OAAO,QAAQ,CAC/B,CAAC,EAGD,IAAMC,EAAc,OAAe,OAC/BA,GACFA,EAAW,UAAU,IAAI,QAAQ,EAInC,IAAMC,EAAa,SAAS,eAAe,iBAAiB,EACvDA,IAEDH,IAAY,WACdG,EAAW,UAAY,gDACvB,OAAO,KAAK,KAAK,MAAO,kCAAkCzC,CAAW,GAAI,CACvE,OAAQ,mBACR,KAAM,YACP,GACQsC,IAAY,aACrBG,EAAW,UAAY,iDACvB,OAAO,KAAK,KAAK,MAAO,uCAAuCzC,CAAW,GAAI,CAC5E,OAAQ,mBACR,KAAM,YACP,GAEL,CAKA,SAAS0C,EAAgB1C,EAAmB,CAC1C,IAAM2C,EAAQ,SAAS,eAAe,iBAAiB,EACvD,GAAI,CAACA,EAAO,OAEZ,IAAMC,EAAaD,EAAM,MAAM,KAAI,EACnC,GAAI,CAACC,EAAY,CACfxB,EAAY,6BAA8B,SAAS,EACnD,MACF,CAEA,GAAI,CAAC,QAAQ,sBAAsBwB,CAAU,qBAAqB,EAChE,OAIF,IAAMC,EAAW,IAAI,SACrBA,EAAS,OAAO,SAAUD,CAAU,EACpCC,EAAS,OAAO,SAAU,MAAM,EAEhC,MAAM,iBAAiB7C,CAAW,uBAAwB,CACxD,OAAQ,OACR,KAAM6C,EACP,EACA,KAAKV,GAAW,CACf,GAAI,CAACA,EAAS,GACZ,MAAM,IAAI,MAAM,eAAeA,EAAS,MAAM,EAAE,EAElD,OAAOA,EAAS,KAAI,CACtB,CAAC,EACA,KAAKW,GAAO,CAEXH,EAAM,MAAQ,GAGd,OAAO,KAAK,KAAK,MAAO,sCAAsC3C,CAAW,GAAI,CAC3E,OAAQ,eACR,KAAM,YACP,EAEDoB,EAAY,gDAAgDwB,CAAU,IAAK,SAAS,CACtF,CAAC,EACA,MAAMR,GAAQ,CACb,QAAQ,MAAM,yBAA0BA,CAAK,EAC7ChB,EAAY,0BAA2B,OAAO,CAChD,CAAC,CACH,CAKA,SAAS2B,EAAkB/C,EAAmB,CAC5C,OAAO,KAAK,KAAK,MAAO,sCAAsCA,CAAW,GAAI,CAC3E,OAAQ,eACR,KAAM,YACP,CACH,CAKA,SAASgD,EAAiBC,EAAiB,CACzC,IAAMC,EAAU,SAAS,eAAeD,CAAS,EACjD,GAAI,CAACC,EAAS,OAEdA,EAAQ,UAAU,OAAO,WAAW,EAGpC,IAAMC,EAAcD,EAAQ,UAAU,SAAS,WAAW,EAC1D,aAAa,QAAQ7C,EAAa,sBAAsB4C,CAAS,EAAGE,EAAY,SAAQ,CAAE,CAC5F,CAKA,SAASC,GAA2B,CAElC,IAAMC,EAAmB,aAAa,QAAQhD,EAAa,sBAAsB,kBAAkB,CAAC,IAAM,OACpGiD,EAAc,SAAS,eAAe,kBAAkB,EAC1DA,GAAeD,GACjBC,EAAY,UAAU,IAAI,WAAW,EAIvC,IAAMC,EAAoB,aAAa,QAAQlD,EAAa,sBAAsB,mBAAmB,CAAC,IAAM,OACtGmD,EAAe,SAAS,eAAe,mBAAmB,EAC5DA,GAAgBD,GAClBC,EAAa,UAAU,IAAI,WAAW,CAE1C,CASA,SAASC,EAAeC,EAAkB,CACxC,IAAMC,EAAW,SAAS,eAAeD,CAAU,EAC9CC,IAGL,SAAS,iBAAiB,kBAAkB,EAAE,QAAQC,GAAK,CACrDA,EAAG,KAAOF,GACZE,EAAG,UAAU,OAAO,QAAQ,CAEhC,CAAC,EAGDD,EAAS,UAAU,OAAO,QAAQ,EACpC,CAKA,SAASE,GAAiB,CACxB,SAAS,iBAAiB,kBAAkB,EAAE,QAAQF,GAAW,CAC/DA,EAAS,UAAU,OAAO,QAAQ,CACpC,CAAC,CACH,CAOA,SAAS,iBAAiB,mBAAoB,IAAK,CAEjD,SAAS,iBAA8B,qBAAqB,EAAE,QAAQG,GAAU,CAC9E,IAAM9D,EAAc8D,EAAQ,aAAa,mBAAmB,EACxD9D,GACFwB,EAAgBxB,CAAW,CAE/B,CAAC,EAGDoD,EAA2B,EAG3B,SAAS,KAAK,iBAAiB,qBAAuBW,GAAgB,CAEpE,QAAQ,MAAM,cADIA,EACqB,MAAM,EAC7C3C,EAAY,0CAA2C,OAAO,CAChE,CAAC,EAGD,SAAS,KAAK,iBAAiB,qBAAuB2C,GAAgB,CACpE,IAAMC,EAASD,EAAM,OACjBC,EAAO,UAAU,SAAS,QAAQ,GACpCA,EAAO,UAAU,IAAI,gBAAgB,CAEzC,CAAC,EAED,SAAS,KAAK,iBAAiB,oBAAsBD,GAAgB,CACnE,IAAMC,EAASD,EAAM,OACjBC,EAAO,UAAU,SAAS,QAAQ,GACpCA,EAAO,UAAU,OAAO,gBAAgB,EAI1CZ,EAA2B,CAC7B,CAAC,CACH,CAAC,EAGD,SAAS,iBAAiB,QAAUW,GAAgB,CAClD,IAAMC,EAASD,EAAM,OACjBC,EAAO,UAAU,SAAS,eAAe,GAC3CnC,EAAU,EAIPmC,EAAO,QAAQ,WAAW,GAC7BH,EAAiB,CAErB,CAAC,EAGD,SAAS,iBAAiB,UAAYE,GAAwB,CACxDA,EAAM,MAAQ,WAChBlC,EAAU,EACVgC,EAAiB,EAErB,CAAC,EAGD,IAAMI,EAAyB,CAC7B,kBAAAlE,EACA,kBAAAQ,EACA,kBAAAE,EACA,oBAAAC,EACA,kBAAAC,EACA,mBAAAM,EACA,wBAAAI,EACA,oBAAAE,EACA,gBAAAC,EACA,uBAAAC,EACA,iBAAAC,EACA,WAAAG,EACA,YAAAT,EACA,cAAAc,EACA,WAAAG,EACA,gBAAAK,EACA,kBAAAK,EACA,eAAAU,EACA,kBAAAI,EACA,oBAAA1C,EACA,iBAAA6B,EACA,4BAAAI,GAIF,OAAO,QAAUa",
  "names": ["STORAGE_KEYS", "serviceName", "contentId", "saveServiceConfig", "serviceName", "configName", "envVars", "description", "key", "STORAGE_KEYS", "configs", "getServiceConfigs", "stored", "loadServiceConfig", "deleteServiceConfig", "getCurrentEnvVars", "container", "pair", "inputs", "keyInput", "valueInput", "applyEnvVarsToForm", "value", "clearCurrentEnvVars", "showMessage", "loadConfigFromSelection", "config", "showSaveConfigModal", "refreshConfigUI", "deleteConfigAndRefresh", "toggleManagement", "managementDiv", "isHidden", "closeModal", "modal", "message", "type", "messageEl", "confirmRemove", "response", "error", "showGitTab", "tabName", "btn", "clickedTab", "tabContent", "createNewBranch", "input", "branchName", "formData", "data", "refreshGitSection", "toggleGitContent", "contentId", "content", "isCollapsed", "restoreGitContentVisibility", "commitsCollapsed", "commitsList", "branchesCollapsed", "branchesList", "toggleDropdown", "dropdownId", "dropdown", "dd", "closeAllDropdowns", "element", "event", "target", "nexsockAPI"]
}
